// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
}

enum Status {
  ACTIVE
  DISABLED
}

model User {
  id          String    @id @default(cuid())
  username    String    @unique
  firstName   String?
  lastName    String?
  email       String?
  handphone   String?
  institution String?
  position    String?
  image       String?
  password    String?
  status      Status    @default(ACTIVE)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  role        UserRole  @default(ADMIN)

  countryId Int? // Menyimpan ID negara

  // Relations
  country          Country?       @relation(fields: [countryId], references: [id]) // Relasi dengan model Country
  notifications    Notification[] // One user can have multiple notifications
  contents         Content[] // One user can create multiple content items
  bookmarks        Bookmark[] // One user can bookmark multiple contents
  comment          Comment[]
  reviewedContents Content[]      @relation("ReviewedContent")
}

model VisitorHistory {
  id             Int       @id @default(autoincrement())
  year           Int?
  month          Int?
  visitor_public Int?
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt
}

model Notification {
  id             Int       @id @default(autoincrement())
  userId         String?
  announcementId Int?
  isRead         Boolean?
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt

  // Relations
  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade) // Many-to-one relation with User
  announcement Announcement? @relation(fields: [announcementId], references: [id], onDelete: SetNull) // Optional link to Announcement
}

model Country {
  id                 Int       @id @default(autoincrement())
  countryName        String?   @unique
  latitude           Float?
  longitude          Float?
  landAreas          String?
  forestAreas        String?
  totalForestAreas   String?
  mangroveAreas      String?
  totalMangroveAreas Int?
  percentage         Float?
  challenges         String?
  recommendation     String?
  programActivities  String?
  policy             String?
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @updatedAt

  // Relations
  users    User[] // Many users can have one country
  contents Content[] // One country can have multiple associated content items
}

// model Content {
//   id                  Int     @id @default(autoincrement())
//   userId              String?
//   email               String?
//   countryId           Int?
//   title               String?
//   author              String?
//   institution         String?
//   cover               Bytes?
//   summary             String?
//   keyword             String?
//   ecologyDim          Float?
//   ecologyMethod       String?
//   ecologyMost1        String?
//   ecologyMost2        String?
//   ecologyMost3        String?
//   socialDim           Float?
//   socialMethod        String?
//   socialMost1         String?
//   socialMost2         String?
//   socialMost3         String?
//   economyDim          Float?
//   economyMethod       String?
//   economyMost1        String?
//   economyMost2        String?
//   economyMost3        String?
//   institutionalDim    Float?
//   institutionalMethod String?
//   institutionalMost1  String?
//   institutionalMost2  String?
//   institutionalMost3  String?
//   technologyDim       Float?
//   technologyMethod    String?
//   technologyMost1     String?
//   technologyMost2     String?
//   technologyMost3     String?

//   sustainability      String?
//   sustainabilityIndex Float?
//   sustainabilityImage Bytes?

//   ecologyGraph       Bytes? // Kolom untuk menyimpan ecologyGraph
//   ecologyLevel       Bytes? // Kolom untuk menyimpan ecologyLeve
//   socialGraph        Bytes? // Kolom untuk menyimpan socialGraph
//   socialLevel        Bytes? // Kolom untuk menyimpan socialLeve
//   economyGraph       Bytes? // Kolom untuk menyimpan economyGraph
//   economyLevel       Bytes? // Kolom untuk menyimpan economyLeve
//   institutionalGraph Bytes? // Kolom untuk menyimpan institutionalGraph
//   institutionalLevel Bytes? // Kolom untuk menyimpan institutionalLeve
//   technologyGraph    Bytes? // Kolom untuk menyimpan technologyGraph
//   technologyLevel    Bytes? // Kolom untuk menyimpan technologyLeve

//   visitorRegistered Int?
//   visitorPublic     Int?
//   createdAt         DateTime? @default(now())
//   updatedAt         DateTime? @updatedAt

//   existingCondition1  String?
//   existingCondition2  String?
//   existingCondition3  String?
//   existingCondition4  String?
//   existingCondition5  String?
//   existingCondition6  String?
//   existingCondition7  String?
//   existingCondition8  String?
//   existingCondition9  String?
//   existingCondition10 String?
//   existingCondition11 String?
//   existingCondition12 String?
//   existingCondition13 String?
//   existingCondition14 String?
//   existingCondition15 String?
//   existingCondition16 String?
//   existingCondition17 String?
//   existingCondition18 String?
//   existingCondition19 String?
//   existingCondition20 String?
//   existingCondition21 String?
//   existingCondition22 String?
//   existingCondition23 String?

//   // Relations
//   user           User?           @relation(fields: [userId], references: [id], onDelete: Cascade) // Many-to-one relation with User
//   country        Country?        @relation(fields: [countryId], references: [id], onDelete: SetNull) // Many-to-one relation with Country
//   bookmarks      Bookmark[] // One content item can have multiple bookmarks
//   supportingDocs SupportingDoc[] // One-to-many relation with SupportingDoc
//   galleries      Gallery[] // One-to-many relation with Gallery
//   videoLinks     VideoLink[] // One-to-many relation with VideoLink
//   maps           Map[] // One-to-many relation with Map
//   comments       Comment[] // One-to-many relation with Comment
// }

model Content {
  id        Int       @id @default(autoincrement())
  userId    String?
  countryId Int?
  title     String?
  summary   String?
  author    String?
  date      DateTime?
  cover     String?
  keywords  String[]

  existingConditions ExistingCondition[]

  ecologyDimension       EcologyDimension?
  socialDimension        SocialDimension?
  economyDimension       EconomyDimension?
  institutionalDimension InstitutionalDimension?
  technologyDimension    TechnologyDimension?
  overallDimension       OverallDimension?

  // supportingDocuments   SupportingDoc[]
  // videos                Video[]

  // status ContentStatus @default(DRAFT)
  status String? @default("DRAFT")

  user           User?           @relation(fields: [userId], references: [id], onDelete: Cascade) // Many-to-one relation with User
  country        Country?        @relation(fields: [countryId], references: [id], onDelete: Cascade) // Many-to-one relation with Country
  bookmarks      Bookmark[] // One content item can have multiple bookmarks
  supportingDocs SupportingDoc[] // One-to-many relation with SupportingDoc
  maps           Map[]
  galleries      Gallery[] // One-to-many relation with Gallery
  videoLinks     VideoLink[] // One-to-many relation with VideoLink
  comments       Comment[] // One-to-many relation with Comment

  views Int? @default(0)

  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  sustainabilityDimensionId String?
  reviewedAt                DateTime?
  reviewedBy                String?
  reviewer                  User?     @relation("ReviewedContent", fields: [reviewedBy], references: [id], onDelete: Cascade)
}

model Comment {
  id        Int      @id @default(autoincrement())
  contentId Int
  userId    String?
  name      String?
  email     String?
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ExistingCondition {
  id          String  @id @default(cuid())
  title       String
  description String
  images      Image[]
  content     Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId   Int
}

model EcologyDimension {
  id                  String   @id @default(cuid())
  title               String
  inputMethod         String
  significantAspects  String[]
  sustainabilityScore Float
  graphImages         Image[]
  content             Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId           Int      @unique
}

model SocialDimension {
  id                  String   @id @default(cuid())
  title               String
  inputMethod         String
  significantAspects  String[]
  sustainabilityScore Float
  graphImages         Image[]
  content             Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId           Int      @unique
}

model EconomyDimension {
  id                  String   @id @default(cuid())
  title               String
  inputMethod         String
  significantAspects  String[]
  sustainabilityScore Float
  graphImages         Image[]
  content             Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId           Int      @unique
}

model InstitutionalDimension {
  id                  String   @id @default(cuid())
  title               String
  inputMethod         String
  significantAspects  String[]
  sustainabilityScore Float
  graphImages         Image[]
  content             Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId           Int      @unique
}

model TechnologyDimension {
  id                  String   @id @default(cuid())
  title               String
  inputMethod         String
  significantAspects  String[]
  sustainabilityScore Float
  graphImages         Image[]
  content             Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId           Int      @unique
}

model OverallDimension {
  id                  String  @id @default(cuid())
  overall             String?
  sustainabilityScore Float?
  graphImages         Image[]
  content             Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId           Int     @unique
}

model SupportingDoc {
  id        Int     @id @default(autoincrement())
  name      String?
  filePath  String?
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId Int
}

model Gallery {
  id        Int     @id @default(autoincrement())
  contentId Int
  imagePath String?
  alt       String?
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model VideoLink {
  id        Int     @id @default(autoincrement())
  contentId Int
  url       String? // URL of the video
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model Map {
  id        String  @id @default(cuid())
  filePath  String?
  alt       String?
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId Int
}

model Bookmark {
  id        Int       @id @default(autoincrement())
  userId    String?
  contentId Int?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  // Relations
  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade) // Many-to-one relation with User
  content Content? @relation(fields: [contentId], references: [id], onDelete: Cascade) // Many-to-one relation with Content
}

model Announcement {
  id         Int       @id @default(autoincrement())
  title      String?
  content    String?
  attachment String?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  // Relations
  notifications Notification[] // One announcement can have multiple associated notifications
}

model Image {
  id                  String             @id @default(cuid())
  filePath            String?
  alt                 String?
  existingCondition   ExistingCondition? @relation(fields: [existingConditionId], references: [id])
  existingConditionId String?

  ecologyDimension         EcologyDimension?       @relation(fields: [ecologyDimensionId], references: [id], onDelete: Cascade)
  ecologyDimensionId       String?
  socialDimension          SocialDimension?        @relation(fields: [socialDimensionId], references: [id], onDelete: Cascade)
  socialDimensionId        String?
  economyDimension         EconomyDimension?       @relation(fields: [economyDimensionId], references: [id], onDelete: Cascade)
  economyDimensionId       String?
  institutionalDimension   InstitutionalDimension? @relation(fields: [institutionalDimensionId], references: [id], onDelete: Cascade)
  institutionalDimensionId String?
  technologyDimension      TechnologyDimension?    @relation(fields: [technologyDimensionId], references: [id], onDelete: Cascade)
  technologyDimensionId    String?
  overallDimension         OverallDimension?       @relation(fields: [overallDimensionId], references: [id], onDelete: Cascade)
  overallDimensionId       String?
}

enum ContentStatus {
  DRAFT
  REVIEW
  PUBLISHED
}

model Document {
  id          Int       @id @default(autoincrement())
  title       String?
  description String?
  fileUrl     String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}
